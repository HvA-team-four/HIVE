}) # End of withProgress() function.
}
moviedetails  <- function(ID){
base_url <- paste("http://www.imdb.com/title/",ID, sep = "") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".title_wrapper h1") %>%
html_text()
rating <<- movie %>%        #Loads the average rating from the movie-information page.
html_nodes("strong span") %>%
html_text() %>%
as.numeric()
genre <- movie %>%          #Loads the genre from the movie-information page.
html_nodes(".subtext a span") %>%
html_text()
genre <<- paste(genre, sep = " ", collapse = " ")
durationcode <- movie %>%   #Loads the durationcode from the movie-information page.
html_nodes(".subtext time") %>%
html_attr("datetime")
minutescode <- as.numeric(gsub("\\D", "", durationcode))                        #Extracts the number of minutes from the durationcode
hours       <- floor(minutescode/60)                                            #Devides the minutescode by 60 to find the amount of hours.
minutes     <- minutescode%%60                                                  #Uses the modulo to count the amount of minutes.
duration    <<- paste(hours, "hour(s)", "and", minutes, "minutes", sep = " ")   #Pasts the hours and minutes in string.
cover <<- movie %>%         #Loads the cover image URL from the movie-information page.
html_nodes(".poster img") %>%
html_attr("src")
} # Requesting moviedetails.
Tweets      <- function(searchterm, maxtweets){
withProgress(message = "Requesting tweets", detail = "Requesting tweets", min = 0, max = 6, value = 1,{
tweetList <- searchTwitter(searchterm, n=maxtweets)
incProgress(message ="Requesting tweets", detail="Sorting tweets", amount = 1)
sorttweetList <- tweetList[order(as.integer(tweetList$created))]
tweetListDF <- do.call("rbind", lapply(tweetList,as.data.frame))
incProgress(message ="Requesting tweets", detail="Cleaning tweets", amount = 1)
CleanTweets <- function(tweets){
tweets <- str_replace_all(tweets,"http://t.co/[a-z,A-Z,0-9]*","")
tweets <- str_replace_all(tweets,"https://t.co/.*","")
tweets <- str_replace_all(tweets,"RT @[a-z, A-Z,0-9]*","")
tweets <- str_replace_all(tweets,"#","")
tweets <- str_replace_all(tweets,"@[a-z, A-Z, 0-9]*"," ")
tweets <- rm_emoticon(tweets)
tweets <- tolower(tweets)
tweets <- removePunctuation(tweets)
tweets <- removeWords(tweets, stopwords("english"))
tweets <- str_replace_all(tweets,"  "," ")
return(tweets)
}
tweetListCleaned <- CleanTweets(tweetListDF$text)
incProgress(message ="Requesting tweets", detail="Preparing counting", amount = 1)
write.csv(tweetListCleaned, "tweets.csv")
tweetListfile <- read.csv("tweets.csv")
#Tweets to RHadoop
#Paths to the input and output files.
path.to.tweets.csv <- file.path(normalizePath('.'), 'tweets.csv')
path.to.results <- file.path(normalizePath('.'), 'counttweets.csv')
# read text files from folder example/wordcount/data
hdfs.root <- '/wordcount'
hdfs.data <- file.path(hdfs.root, 'in')
# save result in folder example/wordcount/out
hdfs.out <- file.path(hdfs.root, paste('out', as.numeric(Sys.time()), sep='-'))
hdfs.put(path.to.tweets.csv, hdfs.data)
# submit job, fetch results from HDFS, load into data frame
incProgress(message ="Requesting tweets", detail="Executing mapreduce", amount = 1)
df <- wordcount(hdfs.data, hdfs.out) %>%
from.dfs %>%
as.data.frame(stringsAsFactors=F)
# set column names and sort
colnames(df) <- c('word', 'count')
tbl <- tbl_df(df) %>%
select(word, count) %>%
arrange(desc(count))
# save to file
write.table(tbl, path.to.results, sep=",")
# remove data and output from hdfs
incProgress(message ="Requesting tweets", detail="Succeeded", amount = 1)
hdfs.rm(hdfs.data)
hdfs.rm(hdfs.out)
return(tbl)
}) #End of withProgress() function
} # End of Tweets() function.
map         <- function(k, lines) {                           #Mapper function.
words.list <- strsplit(lines, '\\s')
words <- unlist(words.list)
return( keyval(words, 1) )
}
reduce      <- function(word, counts) {                    #Reduce function.
keyval(word, sum(counts))
}
wordcount   <- function (input, output=NULL) {          #MapReduce function.
mapreduce(input=input, output=output, input.format="text", map=map, reduce=reduce)
}
#########################
# Top 250 functions.
top250imdb        <- function(){
withProgress(message = 'Loading IMDb', detail = "Connecting to IMDB", min = 0, max=251, value=1, { #Set progress indicator
base_url <- paste("http://www.imdb.com/chart/top") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url) #Start the read_html on the URL
number_top250 <<- 1:250 #Creates a primary key for every movie. The function loads the list from 1 to 250, so it it easear to just create a vector with a range from 1 to 250.
movie_name_top250 <<- movie %>%  #Loads the movie name from the movie-information page.
html_nodes(".titleColumn a") %>%
html_text()
secondaryinfo_html <- movie %>%  #Loads the movie year.
html_nodes(".titleColumn span") %>%
html_text()
secondaryinfo_top250 <<- substr(secondaryinfo_html, 2, nchar(secondaryinfo_html)-1) #Substracts the brackets () from the year. (2001) will be 2001.
rating_top250_html <- movie %>% #Substracts the movie rating right from the top 250 page.
html_nodes(".ratingColumn.imdbRating strong") %>%
html_text()
url_top250 <- movie %>% #Subtract the URL per specific movie.
html_nodes(".titleColumn a") %>%
html_attr("href")
genrestring <<- 1:2
for (i in 1:250 ) { #Loop to loop through the movie pages to scrape the genre.
incProgress(detail = paste(i, movie_name_top250[i]), amount = 1) #Set progress to +1 on every movie load.
movieurl <- paste("http://www.imdb.com", url_top250[i], sep = "") #Generates URL for the page containing information about the movie.
moviepage <- read_html(movieurl)
genre <- moviepage %>%  #Loads the movie name from the movie-information page.
html_nodes(".subtext .itemprop") %>%
html_text()
genrestring[i] <<- paste(genre, collapse=" ", sep=" ") #Pastes all the genres to an genrestring for easy display.
}
top250imdbtable <<- data.table(data.frame("Nr." = number_top250, "Movie name" = movie_name_top250, "Rating" = as.numeric(rating_top250_html), "Year" = as.numeric(secondaryinfo_top250), "Genre" = genrestring)) #Creates a data table from all individual vectors.
}) # End of withProgress() function.
}  # End of top250imdb() function.
top250moviemeter  <- function(){
withProgress(message = 'Loading Moviemeter', detail = "Connecting to Moviemeter", min = 0, max=251, value=1, { #Set progress indicator
base_url <- paste("https://www.moviemeter.nl/list/") #Generates URL for the page containing information about the movie.
moviemeter <- read_html(base_url) #Start the read_html on the URL
moviemeter_number_top250 <<- 1:250 #Creates a primary key for every movie. The function loads the list from 1 to 250, so it it easear to just create a vector with a range from 1 to 250.
moviemeter_moviename <<- moviemeter %>%  #Loads the movie name from the movie-information page.
html_nodes(".film_row a") %>%
html_text()
moviemeter_year <<- moviemeter %>%
html_nodes(".film_row") %>%
html_text()
moviemeter_year <<- substr(moviemeter_year, 15, nchar(moviemeter_year))
moviemeter_year <<- gsub("\\Alternatieve.*", "", moviemeter_year)
moviemeter_year <<- as.numeric(regmatches(moviemeter_year, gregexpr("(?<=\\().*?(?=\\))", moviemeter_year, perl=T)))
moviemeter_rating <<- moviemeter %>%
html_nodes(".average .score") %>%
html_text()
moviemeter_rating <- round(as.numeric(str_replace_all(moviemeter_rating, ",", ".")) *2, digits = 1)
moviemeter_url <<- moviemeter%>%
html_nodes(".film_row a") %>%
html_attr("href")
moviemeter_genres <- c("Actie", "Animatie", "Avontuur", "Documentaire", "Drama", "Erotiek", "Familie", "Fantasy", "Film noir", "Horror", "Komedie", "Misdaad", "Muziek", "Mystery", "Oorlog", "Roadmovie", "Romantiek", "Sciencefiction", "Thriller", "Western")
moviemetergenrestring <<- 1:2
for (k in 1:250 ) { #Loop to loop through the movie pages to scrape the genre.
incProgress(detail = paste(k, moviemeter_moviename[k]), amount = 1) #Set progress to +1 on every movie load.
moviemeter_moviepage <- read_html(moviemeter_url[k])
moviemeter_genre <- moviemeter_moviepage %>%  #Loads the movie name from the movie-information page.
html_nodes("p span") %>%
html_text()
moviemeter_genre <- moviemeter_genre[moviemeter_genre %in% moviemeter_genres]
moviemeter_genre <- str_replace(moviemeter_genre, "Actie", "Action")
moviemeter_genre <- str_replace(moviemeter_genre, "Animatie", "Animation")
moviemeter_genre <- str_replace(moviemeter_genre, "Avontuur", "Adventure")
moviemeter_genre <- str_replace(moviemeter_genre, "Documentaire", "Documentary")
moviemeter_genre <- str_replace(moviemeter_genre, "Erotiek", "")
moviemeter_genre <- str_replace(moviemeter_genre, "Familie", "Family")
moviemeter_genre <- str_replace(moviemeter_genre, "Film noir", "Film Noir")
moviemeter_genre <- str_replace(moviemeter_genre, "Komedie", "Comedy")
moviemeter_genre <- str_replace(moviemeter_genre, "Misdaad", "Crime")
moviemeter_genre <- str_replace(moviemeter_genre, "Muziek", "Music")
moviemeter_genre <- str_replace(moviemeter_genre, "Oorlog", "War")
moviemeter_genre <- str_replace(moviemeter_genre, "Roadmovie", "")
moviemeter_genre <- str_replace(moviemeter_genre, "Romantiek", "Romance")
moviemeter_genre <- str_replace(moviemeter_genre, "Sciencefiction", "Sci-Fi")
moviemetergenrestring[k] <- paste(moviemeter_genre, collapse=" ", sep=" ") #Pastes all the genres to an genrestring for easy display.
} # End of for-loop
top250moviemetertable <<- data.table(data.frame("Nr." = number_top250, "Movie name" = moviemeter_moviename, "Rating" = moviemeter_rating, "Year" = moviemeter_year, "Genre" = moviemetergenrestring)) #Creates a data table from all individual vectors.
}) # End of withProgress() function.
}  # End of top250moviemeter() function.
observeEvent(input$search,{
withProgress(message = "Loading movie", detail = "Preparing", min = 0, max = 5, value = 0,{
output$image = renderUI({ })
output$wordcloud <- renderPlot({})
movie_name <<- NULL     #Clears the movie_name variable
rating <<- NULL         #Clears the rating variable
genre <<- NULL          #Clears the genre variable
cover <<- NULL          #Clears the cover variable
duration <<- NULL       #Clears the duration variable
incProgress(message = "Loading movie", detail = "Requesting moviedetails", amount = 1)
requestimdbID(input$moviesearch)    #triggers the requestimdbID function with the moviesearch variable filled in in the User Interface
output$movie_name <- renderText(paste("Name:", movie_name))   #Fills the movie_name variable and converts it to output
output$rating     <- renderText(paste("Rating:", rating))         #Fills the rating variable and converts it to output
output$genre      <- renderText(paste("Genre:", genre))            #Fills the genre variable and converts it to output
output$duration   <- renderText(paste("Duration:", duration))         #Fills the duration variable and converts it to output
if (length(cover) == 0){
} else {output$image = renderUI({                     #Fills the cover variable and converts it to output
tags$img(src = cover) })
}
if(!movie_name == "Movie not available"){
incProgress(message = "Loading movie", detail = "Requesting tweets", amount = 1)
Tweetlist <- Tweets(input$moviesearch, 500)
Tweetlist <- Tweetlist[-1,]
Tweetlist <<- head(Tweetlist,50)
incProgress(message = "Loading movie", detail = "Creating wordcloud", amount = 1)
output$wordcloud <- renderPlot({
wordcloud(Tweetlist$word,Tweetlist$count, colors=brewer.pal(8, "Dark2"), max.words = 100, scale = c(5,0.6))
})
} # End of if statement.
}) # End of withProgress() function.
}) # Ends the observeEvent function
observeEvent(input$showgenres, { #Function for showing and hiding the genreselector.
toggle("genreselector")
})
clicks = reactiveValues(counter = 0) #Function used to change the label of the load250 button from load to refresh once it is already loaded.
output$Searchbutton <- renderUI({ #RenderUI function for displaying a button using which is generated in the Server function.
actionButton("click", label = label())
})
observeEvent(input$click, { #Observes if the users clicks the load/refresh top 250 function.
if (exists("top250imdbtable") == FALSE | exists("top250moviemetertable") == FALSE){ #Checks if the top 250 is already loaded, if not, execute top250imdb() function.
top250imdb()
top250moviemeter()
}
top250moviemetersubset  <<- subset(top250moviemetertable, top250moviemetertable$Rating >= input$ratingslider[1] & top250moviemetertable$Rating <= input$ratingslider[2] & top250moviemetertable$Year >= input$yearslider[1] & top250moviemetertable$Year <= input$yearslider[2])#Subsets the datatable with the key-filters filled in by the user.
top250imdbsubset        <<- subset(top250imdbtable, top250imdbtable$Rating >= input$ratingslider[1] & top250imdbtable$Rating <= input$ratingslider[2] & top250imdbtable$Year >= input$yearslider[1] & top250imdbtable$Year <= input$yearslider[2]) #Subsets the datatable with the key-filters filled in by the user.
if(!is.null(input$genreselector)){ #Condition if the users have checked a genre in the filter.
for (i in 1:length(input$genreselector)) { #Loops through the amount of genres the user has filled in.
top250imdbsubset        <<- top250imdbsubset[Genre %like% input$genreselector[i]] #Checks if the genre from the top 250 contains one of the genres selected by the user.
top250moviemetersubset  <<- top250moviemetersubset[Genre %like% input$genreselector[i]]
} # End of for loop.
} # End of if statement.
output$top250imdb       <- renderDataTable(top250imdbsubset, options = list(paging = FALSE)) #Renders datatable for output with a length of 50 rows.
output$top250moviemeter <- renderDataTable(top250moviemetersubset, options = list(paging = FALSE))
}) #End of observeEvent() function.
observe({
if(!is.null(input$click)){
input$click
isolate({
clicks$counter <- clicks$counter + 1 #Inreases counter variable if the load button is clicked.
})
}
})
label <- reactive({
if(!is.null(input$click)){
if(clicks$counter >= 2) label <- "Refresh" #Displays the refresh button is the counter is greater or equal to once clicked.
else label <- "Load" #Displays "load" if the button is not clicked yet.
}
}
)
} #Ends the server function
################################################################################################
# Creating shinyApp.
################################################################################################
shinyApp(ui = ui, server = server)
base_url <- "https://trello.com" #Generates URL for the page containing information about the movie.
base_url
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
base_url
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".board-tile mod-add") %>%
html_text()
movie_name
library (xml)
library (rvest)
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes("p .job-title") %>%
html_text()
movie_name
library (xml)
library (rvest)
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".job-title") %>%
html_text()
movie_name
base_url <- paste("http://www.imdb.com/chart/top") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url) #Start the read_html on the URL
movie_name_top250 <<- movie %>%  #Loads the movie name from the movie-information page.
html_nodes(".titleColumn a") %>%
html_text()
movie_name_top250
library (xml)
library (rvest)
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".userinfo .job-title") %>%
html_text()
movie_name
base_url <- paste("http://www.imdb.com/chart/top") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url) #Start the read_html on the URL
number_top250 <<- 1:250 #Creates a primary key for every movie. The function loads the list from 1 to 250, so it it easear to just create a vector with a range from 1 to 250.
movie_name_top250 <<- movie %>%  #Loads the movie name from the movie-information page.
html_nodes(".userinfo .job-title") %>%
html_text()
movie_name_top250
movie_name_top250
library (xml)
library (rvest)
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".userinfo.unstyle-th-as-td .job-title") %>%
html_text()
movie_name
library (rvest)
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".userinfo .unstyle-th-as-td .job-title") %>%
html_text()
movie_name
library (rvest)
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".info .job-title") %>%
html_text()
movie_name
library (rvest)
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".info .joined_at") %>%
html_text()
movie_name
library (rvest)
base_url <- paste("http://www.imdb.com/chart/top") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".userinfo .job-title") %>%
html_text()
movie_name
base_url <- paste("http://www.imdb.com/chart/top") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url) #Start the read_html on the URL
s a primary key for every movie. The function loads the list from 1 to 250, so it it easear to just create a vector with a range from 1 to 250.
movie_name_top250 <<- movie %>%  #Loads the movie name from the movie-information page.
html_nodes(".userinfo .job-title") %>%
html_text()
base_url <- paste("http://www.imdb.com/chart/top") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url) #Start the read_html on the URL
s a primary key for every movie. The function loads the list from 1 to 250, so it it easear to just create a vector with a range from 1 to 250.
movie_name_top250 <<- movie %>%  #Loads the movie name from the movie-information page.
html_nodes(".userinfo .job-title") %>%
html_text()
movie_name_top250
base_url <- paste("http://www.imdb.com/chart/top") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url) #Start the read_html on the URL
number_top250 <<- 1:250 #Creates a primary key for every movie. The function loads the list from 1 to 250, so it it easear to just create a vector with a range from 1 to 250.
movie_name_top250 <<- movie %>%  #Loads the movie name from the movie-information page.
html_nodes(".userinfo .job-title") %>%
html_text()
movie_name_top250
base_url <- paste("http://www.imdb.com/chart/top") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url) #Start the read_html on the URL
s a primary key for every movie. The function loads the list from 1 to 250, so it it easear to just create a vector with a range from 1 to 250.
movie_name_top250 <<- movie %>%  #Loads the movie name from the movie-information page.
html_nodes(".titleColumn a") %>%
html_text()
movie_name_top250
library (rvest)
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=9") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".userinfo .job-title") %>%
html_text()
movie_name
library (rvest)
base_url <- paste("https://www.bol.com/nl/m/boeken/literatuur/index.html") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".product-prices") %>%
html_text()
library (rvest)
base_url <- paste("https://www.bol.com/nl/m/boeken/literatuur/index.html") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".product-prices") %>%
html_text()
movie_name
movie
library (rvest)
base_url <- paste("https://www.bol.com/nl/m/boeken/literatuur/index.html") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie
movie_name <<- movie %>%    #Loads the movie name from the movie-information page.
html_nodes(".srt") %>%
html_text()
movie_name
base_url <- paste("https://www.yammer.com/leapp.nl/users?model_type=User&page=5") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie
base_url <- paste("https://www.yammer.com/leapp.nl/#/users/1569778117") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie
movie
base_url <- paste("https://www.yammer.com/api/v1/users/1633509626") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
library (rvest)
movie <- read_html(base_url)
base_url <- paste("https://www.yammer.com/api/v1/users/1633509626") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
movie
base_url <- paste("https://www.yammer.com/api/v1/users/1633509626") #Generates URL for the page containing information about the movie.
movie <- read_html(base_url)
library(shiny)
ui <- fluidPage()
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/NAOMI.R')
runApp('Desktop/NAOMI/welcome.r')
require("shinh")
require("shiny")
library("shiny")
RequirePackage <- function (x){
x<- as.character(x)
if (!require(x,character.only = TRUE))
{
install.packages(x)
require(x,character.only = TRUE)
}
}
RequirePackage("shiny")
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
install.packages(function_name)
require(function_name,character.only = TRUE)
}
}
RequirePackage("rd")
RequirePackage("shiny")
require(function_name,character.only = TRUE)
require(function_name,character.only = TRUE)
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
install.packages(function_name)
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
install.packages(function_name)
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
install.packages(function_name)
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny")
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
print("Package already installed, loading...")
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny")
runApp('Documenten/HIVE/HIVE/honeycomb/Honeycomb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Honeycomb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
help("textOutput")
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
library(shiny); runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
library(shiny); runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
library(shiny); runApp('HoneyComb.R')
library(shiny); runApp('HoneyComb.R')
library(shiny); runApp('HoneyComb.R')
