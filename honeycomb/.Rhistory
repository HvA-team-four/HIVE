runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
help("textOutput")
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
library(shiny); runApp('Documenten/HIVE/HIVE/honeycomb/Server.R')
library(shiny); runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
runApp('Documenten/HIVE/HIVE/honeycomb/HoneyComb.R')
library(shiny); runApp('HoneyComb.R')
library(shiny); runApp('HoneyComb.R')
library(shiny); runApp('HoneyComb.R')
library(shiny); runApp('HoneyComb.R')
install.packages("RMySQL")
RequirePackage("RMySQL") #Loading RMySQL package
mydb = dbConnect(MySQL(), user='root', password='root', dbname='scotchbox', host='127.0.0.1')
mydb = dbConnect(MySQL(), user='root', password='root', dbname='scotchbox', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='root', dbname='scotchbox', host='127.0.0.1')
python.load("honeycomb.py")
python.load("../crawler/honeycomb.py")
python.load("./crawler/honeycomb.py")
python.load("../crawler/honeycomb.py")
python.load("../crawler/models.py")
runApp('HoneyComb.R')
source('HoneyComb.R')
source('HoneyComb.R')
source('app.R')
source('app.R')
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
keywordTable
output$keywordtable <- renderTable(keywordTable)
}
# Loading application
runApp(appDir = getwd(), port = "8888"),
launch.browser = getOption("shiny.launch.browser", interactive()),
host = getOption("shiny.host", "127.0.0.1"), workerId = "",
quiet = FALSE, display.mode = c("auto", "normal", "showcase"))
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
keywordTable
output$keywordtable <- renderTable(keywordTable)
}
# Loading application
runApp(appDir = getwd(), port = getOption("shiny.port"),
launch.browser = getOption("shiny.launch.browser", interactive()),
host = getOption("shiny.host", "127.0.0.1"), workerId = "",
quiet = FALSE, display.mode = c("auto", "normal", "showcase"))
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
keywordTable
output$keywordtable <- renderTable(keywordTable)
}
runApp(appDir = getwd(), port = getOption("shiny.port"))
?shinyApp
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
keywordTable
output$keywordtable <- renderTable(keywordTable)
}
shinyApp(server = server, ui = ui, port = 8000)
shinyApp(server = server, ui = ui, port = '8000'
shinyApp(server = server, ui = ui, port = '8000'
shinyApp(server = server, ui = ui, port = '8000'
shinyApp(server = server, ui = ui, port = '8000'
shinyApp(server = server, ui = ui, port = getOption("shiny.port"))
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
keywordTable
output$keywordtable <- renderTable(keywordTable)
}
shinyApp(server = server, ui = ui, options = list(port = 8080))
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
keywordTable
output$keywordtable <- renderTable()
}
shinyApp(server = server, ui = ui, options = list(port = 8080))
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
output$keywordtable <- renderTable()
}
shinyApp(server = server, ui = ui, options = list(port = 8080))
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "www/honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
}
shinyApp(server = server, ui = ui, options = list(port = 8080))
runApp()
RequirePackage <- function (function_name){
function_name <- as.character(function_name)
if (!require(function_name,character.only = TRUE))
{
print("Installing package")
install.packages(function_name)
print("Loading package...")
require(function_name,character.only = TRUE)
} else {
require(function_name,character.only = TRUE)
}
}
RequirePackage("shiny") #Loading Shiny package
# User Interface: The user interface contains all input- and output controls which are rendered by the server function.
ui <- fluidPage(
navbarPage(title ="HIVE", theme = "./www/honeycomb.css",
tabPanel("Home",
column(4, align="center", style='margin-top: 80px;', offset = 4,
imageOutput("application_image", width = "180px", height = "70px"),
h3("Welcome at HIVE"),
p("Please use the navigation-bar to navigate to the right module and start using HIVE. Please contact us if you needs assistance"),
tags$style(type="text/css", "#string { height: 50px; width: 100%; text-align:center; font-size: 30px; display: block;}")
)
),
tabPanel("Panel"
),
navbarMenu("Settings",
tabPanel("Status"
),
tabPanel("Keywords",
tableOutput("keywordtable")
),
tabPanel("Help"
)
)
)
)
# Server: The server function contains functions to render the in- and output elements.
server <- function(input, output, session){
# Home TAB
output$application_image <- renderImage({
return(list(
src = "assets/application_logo.png",
contentType = "application_logo.png",
width = "100%",
alt = "Application Logo"
))
}, deleteFile = FALSE)
}
shinyApp(server = server, ui = ui, options = list(port = 8080))
runApp()
runApp()
